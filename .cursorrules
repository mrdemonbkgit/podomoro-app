# ZenFocus AI Agent - Quick Start & Critical Rules

## 🎯 FIRST: Read the Comprehensive Guide

**📖 Read [`AI_AGENT_GUIDE.md`](AI_AGENT_GUIDE.md) for complete project context and detailed instructions.**

This file contains only critical rules and quick references. For detailed explanations, workflows, and examples, consult the comprehensive guide.

---

## ⚡ Quick Context

**Project:** ZenFocus - Dual-purpose productivity app  
**Features:** Pomodoro Timer (existing) + Kamehameha Recovery Tool (in development)  
**Tech:** React 19, TypeScript, Vite, Firebase, OpenAI GPT-5

**User:** Tony (new to Firebase, budget-conscious, privacy-focused)

---

## 📋 Before Starting Any Task

1. **Check current status:** `docs/kamehameha/PROGRESS.md`
2. **Find your phase:** `docs/kamehameha/QUICKSTART.md`
3. **Read requirements:** `docs/kamehameha/SPEC.md`
4. **Know file locations:** `docs/kamehameha/FILE_STRUCTURE.md`

---

## ⚠️ CRITICAL RULES (Never Break These)

### Security 🔒
- ❌ **NEVER** expose API keys in frontend code
- ✅ Store OpenAI key in Cloud Functions config only
- ✅ Always verify user ownership in Firestore rules
- ✅ Test security rules thoroughly before deployment

### Code Quality 💻
- ✅ All new code must be TypeScript (strict mode)
- ✅ Follow existing patterns (check Timer feature)
- ✅ Mobile-first responsive design
- ✅ Support dark mode in all components

### Documentation 📝
- ✅ **Update `PROGRESS.md` after EVERY task** (non-negotiable)
- ✅ Document solutions if debugging took >30 minutes
- ✅ Keep `DATA_SCHEMA.md` synced with Firestore
- ✅ Note spec deviations in `SPEC.md` with reasons

### Git Commits 🔀
- ❌ Never commit without updating documentation
- ❌ Never skip hooks (--no-verify, --no-gpg-sign)
- ❌ Never force push to main/master
- ✅ Use conventional commit format: `<type>: <description>`

---

## 🔄 During Development

### Every 30-60 Minutes
```
✅ Update docs/kamehameha/PROGRESS.md
✅ Note blockers if any
```

### When Schema Changes
```
✅ Update docs/kamehameha/DATA_SCHEMA.md
✅ Update TypeScript interfaces
```

### When Behavior Differs from Spec
```
✅ Update docs/kamehameha/SPEC.md
✅ Explain why in comments
```

### When You Learn Something (>30 min debugging)
```
✅ Document in docs/kamehameha/DEVELOPER_NOTES.md
```

---

## 🚨 Pre-Commit Checklist

- [ ] `PROGRESS.md` updated?
- [ ] Tricky solutions documented?
- [ ] Schema changes reflected in `DATA_SCHEMA.md`?
- [ ] Implementation matches `SPEC.md`?
- [ ] TypeScript compiles without errors?
- [ ] No console errors in dev?
- [ ] Tested in dark mode?
- [ ] Mobile responsive?

---

## 📂 Quick File Reference

### Kamehameha Files Go Here:
```
src/features/kamehameha/
├── pages/         - KamehamehaPage.tsx, ChatPage.tsx
├── components/    - StreakTimer.tsx, CheckInModal.tsx, etc.
├── hooks/         - useKamehameha.ts, useStreaks.ts, etc.
├── services/      - firestoreService.ts, aiChatService.ts
└── types/         - kamehameha.types.ts
```

### Documentation:
```
docs/
├── INDEX.md                    - Navigation hub
├── kamehameha/PROGRESS.md      - Task tracker (UPDATE OFTEN!)
├── kamehameha/QUICKSTART.md    - Phase guide
├── kamehameha/SPEC.md          - Requirements
├── kamehameha/DATA_SCHEMA.md   - Database structure
└── kamehameha/FILE_STRUCTURE.md - Complete reference
```

---

## 📖 Essential Documentation

**For detailed instructions, see [`AI_AGENT_GUIDE.md`](AI_AGENT_GUIDE.md)**

### Quick Access:
- **Full guide:** [`AI_AGENT_GUIDE.md`](AI_AGENT_GUIDE.md)
- **Navigation:** [`docs/INDEX.md`](docs/INDEX.md)
- **Current status:** [`docs/kamehameha/PROGRESS.md`](docs/kamehameha/PROGRESS.md)
- **Phase guide:** [`docs/kamehameha/QUICKSTART.md`](docs/kamehameha/QUICKSTART.md)
- **Requirements:** [`docs/kamehameha/SPEC.md`](docs/kamehameha/SPEC.md)
- **Database:** [`docs/kamehameha/DATA_SCHEMA.md`](docs/kamehameha/DATA_SCHEMA.md)
- **File structure:** [`docs/kamehameha/FILE_STRUCTURE.md`](docs/kamehameha/FILE_STRUCTURE.md)
- **Tips:** [`docs/kamehameha/DEVELOPER_NOTES.md`](docs/kamehameha/DEVELOPER_NOTES.md)
- **Maintenance:** [`docs/kamehameha/DOCUMENTATION_MAINTENANCE.md`](docs/kamehameha/DOCUMENTATION_MAINTENANCE.md)

---

## 🎯 Success Metrics

**You're doing well if:**
- ✅ `PROGRESS.md` reflects actual current state
- ✅ No dead code or unused files
- ✅ TypeScript has no errors
- ✅ Documentation stays in sync with code
- ✅ Next AI agent can pick up where you left off

---

## 💬 Communication Style

- Be concise but thorough
- Explain Firebase concepts clearly (user is new to it)
- Show code examples
- Link to relevant documentation
- Ask clarifying questions if unclear

---

## 🔍 If You're Stuck

1. Check `docs/kamehameha/DEVELOPER_NOTES.md` for known issues
2. Review `docs/kamehameha/SPEC.md` for requirements
3. Look at existing Timer feature for patterns
4. Check Firebase Console for errors
5. Ask the user for clarification

---

## 📝 Reading Order for New Tasks

```
1. docs/kamehameha/PROGRESS.md     (where are we?)
2. docs/kamehameha/QUICKSTART.md   (what's the phase?)
3. docs/kamehameha/SPEC.md         (what to build?)
4. docs/kamehameha/FILE_STRUCTURE.md (where does it go?)
5. docs/kamehameha/DEVELOPER_NOTES.md (any tips?)
6. Start coding!
7. Update PROGRESS.md as you go
```

**For detailed reading orders by task type, see [`AI_AGENT_GUIDE.md`](AI_AGENT_GUIDE.md#reading-order-for-tasks)**

---

## 🛠️ Common Commands

```bash
npm run dev                       # Start dev server
firebase emulators:start          # Start Firebase emulator
firebase deploy --only functions  # Deploy Cloud Functions
npm run build                     # Build for production
npm test                          # Run tests
npx tsc --noEmit                 # Type check
```

---

## ⚡ Quick Tips

1. **Read before you code** - Prevents misunderstandings
2. **Follow existing patterns** - Check Timer feature for examples
3. **Test security rules** - Use Firebase emulator
4. **Update docs as you go** - Don't wait until the end
5. **Ask questions** - Better to clarify than guess

---

## 🎓 Context

**Developer (Tony):**
- New to Firebase (provide clear explanations)
- Budget-conscious (monitor costs)
- Privacy-focused (user data security critical)
- Using Google login for auth
- Has OpenAI API key ready

**Tech Stack:**
- React 19 + TypeScript + Vite
- Tailwind CSS + Framer Motion
- Firebase (Auth + Firestore + Cloud Functions)
- OpenAI GPT-5 (for AI chat)
- React Router

---

## 📞 Need More Details?

**This file is intentionally brief.** For:
- Detailed workflows and examples
- Comprehensive project context
- Step-by-step implementation guides
- Architecture explanations
- Troubleshooting guides

**👉 Read [`AI_AGENT_GUIDE.md`](AI_AGENT_GUIDE.md) - The authoritative comprehensive guide**

---

**Remember:** 
- This project has comprehensive documentation - USE IT!
- Reading 5 minutes of docs saves 30 minutes of debugging
- **Most important:** Keep `PROGRESS.md` updated as you work!

🚀 Happy coding!
